swagger: "2.0"
info:
  title: beego Test API
  description: beego has a very cool tools to autogenerate documents for your API
  version: 1.0.0
  termsOfService: http://beego.me/
  contact:
    email: astaxie@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
basePath: /v1
paths:
  /departments/:
    post:
      tags:
      - departments
      description: create Departments
      operationId: DepartmentsController.Post
      parameters:
      - in: body
        name: body
        description: body for Departments content
        required: true
        schema:
          $ref: '#/definitions/models.Departments'
      responses:
        "201":
          description: '{int} models.Departments'
        "403":
          description: body is empty
  /departments/{id}:
    get:
      tags:
      - departments
      description: get Departments by id
      operationId: DepartmentsController.Get One
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Departments'
        "403":
          description: :id is empty
    put:
      tags:
      - departments
      description: update the Departments
      operationId: DepartmentsController.Put
      parameters:
      - in: path
        name: id
        description: The id you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for Departments content
        required: true
        schema:
          $ref: '#/definitions/models.Departments'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Departments'
        "403":
          description: :id is not int
    delete:
      tags:
      - departments
      description: delete the Departments
      operationId: DepartmentsController.Delete
      parameters:
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: id is empty
  /employees/:
    post:
      tags:
      - employees
      description: create Employees
      operationId: EmployeesController.Post
      parameters:
      - in: body
        name: body
        description: body for Employees content
        required: true
        schema:
          $ref: '#/definitions/models.Employees'
      responses:
        "201":
          description: '{int} models.Employees'
        "403":
          description: body is empty
  /employees/{id}:
    get:
      tags:
      - employees
      description: get Employees by id
      operationId: EmployeesController.Get One
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Employees'
        "403":
          description: :id is empty
    delete:
      tags:
      - employees
      description: delete the Employees
      operationId: EmployeesController.Delete
      parameters:
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: id is empty
  /employees/{id}/GetDepartment:
    get:
      tags:
      - employees
      description: Get Department of Employee
      operationId: EmployeesController.GET
      parameters:
      - in: path
        name: id
        description: The id you want to get
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Employees'
        "403":
          description: :error
  /employees/GetAllQ:
    get:
      tags:
      - employees
      description: get Employees sdafafas
      operationId: EmployeesController.GetAllQ
      parameters:
      - in: query
        name: query
        description: Filter. e.g. col1:v1,col2:v2 ...
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Employees'
        "403":
          description: ""
  /employees/PostValidation:
    post:
      tags:
      - employees
      description: create Employees
      operationId: EmployeesController.Post
      parameters:
      - in: body
        name: body
        description: body for Employees content
        required: true
        schema:
          $ref: '#/definitions/models.Employees'
      responses:
        "201":
          description: '{int} models.Employees'
        "403":
          description: body is empty
  /employees/getall:
    get:
      tags:
      - employees
      description: get Employees sdafafas
      operationId: EmployeesController.Get All
      parameters:
      - in: query
        name: query
        description: Filter. e.g. col1:v1,col2:v2 ...
        type: string
      - in: query
        name: fields
        description: Fields returned. e.g. col1,col2 ...
        type: string
      - in: query
        name: sortby
        description: Sorted-by fields. e.g. col1,col2 ...
        type: string
      - in: query
        name: order
        description: Order corresponding to each sortby field, if single value, apply
          to all sortby fields. e.g. desc,asc ...
        type: string
      - in: query
        name: limit
        description: Limit the size of result set. Must be an integer
        type: string
      - in: query
        name: offset
        description: Start position of result set. Must be an integer
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Employees'
        "403":
          description: ""
definitions:
  models.Departments:
    title: Departments
    type: object
    properties:
      Employees:
        type: array
        items:
          $ref: '#/definitions/models.Employees'
      Id:
        type: integer
        format: int64
      Name:
        type: string
      Quantity:
        type: string
  models.Employees:
    title: Employees
    type: object
    properties:
      Age:
        type: integer
        format: int64
      Email:
        type: string
      Id:
        type: integer
        format: int64
      IdDepartment:
        type: integer
        format: int64
      Name:
        type: string
      NameDepartment:
        type: string
tags:
- name: departments
  description: |
    DepartmentsController operations for Departments
- name: employees
  description: |
    EmployeesController operations for Employees
